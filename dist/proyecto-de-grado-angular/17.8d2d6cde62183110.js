(()=>{"use strict";class p{constructor(i){this.initializeConfiguration(i),this.resultado=this.ejecutar()}initializeConfiguration(i){this.arrCoeficiente=i.arrCoeficiente,this.probabilidadMutacion=i.probMutacion,this.arrRestriccion=i.arrRestriccion.map(t=>({...t,coeficientes:t.coeficientes||new Array(this.arrCoeficiente.length).fill(0)})),this.tipoSeleccion=i.tipoSeleccion,this.tamanoPoblacion=i.numIndividuos,this.tipoCruce=i.tipoCruce,this.tipoMutacion=i.tipoMutacion,this.probabilidadCruce=i.probCruce,this.numIteraciones=i.numGeneraciones,this.convergencia=i.convergencia,this.elitismo=i.elitismo,this.poblacion=this.generarPoblacionInicial(),this.tituloEjecucion=i.tituloEjecucion}generarPoblacionInicial(){const i=[];for(let t=0;t<this.tamanoPoblacion;t++){let e=this.crearIndividuo();for(;!this.esIndividuoValido(e);)e=this.crearIndividuo();i.push(e)}return this.actualizarProbabilidades(i),i}crearIndividuo(){const i=this.crearGenotipo(),t=this.crearFenotipo(i),e=this.calcularFitnessXi(t),o=i.map(s=>s.join("")).join("");return{genotipos:i,binario:o,fenotipos:t,fitness:e,probabilidadAcumulada:0,probabilidad:0}}binarioADecimal(i){return parseInt(i.join(""),2)}crearGenotipo(){return this.arrCoeficiente.map(t=>Array.from({length:t.Lind},()=>Math.random()<.5?0:1))}crearFenotipo(i){let t=[];return i.forEach((e,o)=>{t.push(Math.ceil(this.arrCoeficiente[o].xMin+this.binarioADecimal(e)*(this.arrCoeficiente[o].xMax-this.arrCoeficiente[o].xMin)/(Math.pow(2,this.arrCoeficiente[o].Lind)-1)))}),t}calcularFitnessXi(i){let t=0;return this.arrCoeficiente.forEach((e,o)=>{t+=e.value*i[o]}),t}esIndividuoValido(i){for(let t of this.arrRestriccion)if(!this.cumpleRestriccion(i,t))return!1;return!0}cumpleRestriccion(i,t){let e=0;switch(t.coeficientes.forEach((o,s)=>{e+=o*i.fenotipos[s]}),t.operador){case"<=":return e<=t.value;case">=":return e>=t.value;case">":return e>t.value;case"<":return e<t.value;default:return!0}}actualizarProbabilidades(i){let t=0,e=i.reduce((o,s)=>o+s.fitness,0);for(let o=0;o<this.tamanoPoblacion;o++)i[o].probabilidad=i[o].fitness/e,i[o].probabilidadAcumulada=t+i[o].probabilidad,t=i[o].probabilidadAcumulada}mutar(i){this.mutarBitflip(i)}ejecutar(){let i=[...this.poblacion],t=this.calculoFitnessTotal(),e=[];for(let s=0;s<this.numIteraciones;s++){const r=[];let l=this.tamanoPoblacion;if(this.elitismo){const c=this.poblacion.reduce((n,a)=>a.fitness>n.fitness?a:n);r.push(c),l--}for(;l>0;){const c=this.seleccionarPadre(),n=this.seleccionarPadre();let a=this.cruzar(c,n);a.map(u=>this.mutar(u)),a[0].fenotipos=this.crearFenotipo(a[0].genotipos),a[1].fenotipos=this.crearFenotipo(a[1].genotipos),a[0].fitness=this.calcularFitnessXi(a[0].fenotipos),a[1].fitness=this.calcularFitnessXi(a[1].fenotipos),a[0].binario=this.aplanarCromosomas(a[0].genotipos).join(""),a[1].binario=this.aplanarCromosomas(a[1].genotipos).join(""),a.forEach(u=>{this.esIndividuoValido(u)&&l>0&&(r.push(u),l--)})}this.actualizarPoblacion(r);let d=this.poblacion.reduce((c,n)=>n.fitness>c.fitness?n:c,this.poblacion[0]);if(e.push(d.fitness),this.convergencia&&this.verificarConvergencia()){console.log(`Convergencia alcanzada en la iteraci\xf3n ${s+1}`);break}}return{tablaInicial:i,fitnessInicial:t,tablaFinal:[...this.poblacion],fitnessFinal:this.calculoFitnessTotal(),mejoresCromosomas:e}}verificarConvergencia(){const i=this.poblacion[0].fitness;for(let t=1;t<this.tamanoPoblacion;t++)if(this.poblacion[t].fitness!==i)return!1;return!0}aplanarCromosomas(i){return i.reduce((t,e)=>t.concat(e),[])}actualizarPoblacion(i){let t=i.reduce((e,o)=>e+o.fitness,0);i.forEach((e,o)=>{e.probabilidad=e.fitness/t,e.probabilidadAcumulada=0===o?e.probabilidad:e.probabilidad+i[o-1].probabilidad}),this.poblacion=[...i]}mutarBitflip(i){i.genotipos.forEach(t=>{t.forEach((e,o)=>{Math.random()<this.probabilidadMutacion&&(t[o]=0===e?1:0)})})}seleccionarPadre(){let i=null;return i=this.seleccionarPadreRuleta(),i}seleccionarPadreRuleta(){const i=Math.random();for(const t of this.poblacion)if(i<=t.probabilidadAcumulada)return JSON.parse(JSON.stringify(t));return JSON.parse(JSON.stringify(this.poblacion[this.poblacion.length-1]))}cruzar(i,t){let e=[];return Math.random()>this.probabilidadCruce?[i,t]:(e=this.cruzarUnPunto(i,t),e)}cruzarUnPunto(i,t){const e=Math.floor(Math.random()*i.genotipos.length-1),o=this.crearEstructuraIndividuoVacio(),s=this.crearEstructuraIndividuoVacio();for(let r=0;r<i.genotipos.length;r++)r<=e?(o.genotipos.push(i.genotipos[r]),s.genotipos.push(t.genotipos[r])):(o.genotipos.push(t.genotipos[r]),s.genotipos.push(i.genotipos[r]));return[o,s]}crearEstructuraIndividuoVacio(){return{genotipos:[],binario:"",fenotipos:[],fitness:0,probabilidadAcumulada:0,probabilidad:0}}calculoFitnessTotal(){let i=0;for(const t of this.poblacion)i+=t.fitness;return i}}addEventListener("message",({data:h})=>{let i=new p(h);postMessage({resultado:i})})})();