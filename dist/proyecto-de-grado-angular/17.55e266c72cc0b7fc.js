(()=>{"use strict";class m{constructor(i){this.initializeConfiguration(i),this.resultado=this.ejecutar()}initializeConfiguration(i){this.arrCoeficiente=i.arrCoeficiente,this.arrRestriccion=i.arrRestriccion,this.tipoSeleccion=i.tipoSeleccion,this.tamanoPoblacion=i.numIndividuos,this.tipoCruce=i.tipoCruce,this.arrCoeficiente=i.arrCoeficiente,this.arrRestriccion=i.arrRestriccion,this.tipoMutacion=i.tipoMutacion,this.probabilidadCruce=i.probCruce,this.Lind=this.arrCoeficiente.length,this.numIteraciones=i.numGeneraciones,this.convergencia=i.convergencia,this.elitismo=i.elitismo,this.poblacion=this.generarPoblacionInicial(),this.tituloEjecucion=i.tituloEjecucion}generarPoblacionInicial(){const i=[];for(let o=0;o<this.tamanoPoblacion;o++){let a=!1;const t={cromosoma:[],binario:"",xi:0,fitness:0,probabilidadAcumulada:0,probabilidad:0,fx:0};for(;!1===a;){a=!0;const e=[];for(let r=0;r<this.Lind;r++)e.push(Math.random()<.5?0:1);t.cromosoma=[...e],t.binario=e.join("");let s=0;for(let r=0;r<this.Lind;r++)s+=t.cromosoma[r]*this.arrCoeficiente[r].value;for(let r of this.arrRestriccion)if(a)switch(r.operador){case"<=":a=!(s>r.value);break;case">=":a=!(s<r.value);break;case">":a=!(s<=r.value);break;case"<":a=!(s>=r.value)}t.fitness=s}i.push(t)}return this.actualizarProbabilidades(i),i}actualizarProbabilidades(i){let o=0,a=i.reduce((t,e)=>t+e.fitness,0);for(let t=0;t<this.tamanoPoblacion;t++)i[t].probabilidad=i[t].fitness/a,i[t].probabilidadAcumulada=o+i[t].probabilidad,o=i[t].probabilidadAcumulada}ejecutar(){let i=[...this.poblacion],o=this.calculoFitnessTotal(),a=[];for(let e=0;e<this.numIteraciones;e++){const s=[];let r=this.tamanoPoblacion;if(this.elitismo){const n=this.poblacion.reduce((c,l)=>l.fitness>c.fitness?l:c);s.push(n),r--}for(;r>0;){const n=this.seleccionarPadre(),c=this.seleccionarPadre();let l=this.cruzar(n,c);l=l.map(u=>this.mutar(u)),l.forEach(u=>{this.esIndividuoValido(u)&&r>0&&(s.push(u),r--)})}this.actualizarPoblacion(s);let h=this.poblacion.reduce((n,c)=>c.fitness>n.fitness?c:n,this.poblacion[0]);if(a.push(h.fitness),this.convergencia&&this.verificarConvergencia()){console.log(`Convergencia alcanzada en la iteraci\xf3n ${e+1}`);break}}return{tablaInicial:i,fitnessInicial:o,tablaFinal:[...this.poblacion],fitnessFinal:this.calculoFitnessTotal(),mejoresCromosomas:a}}verificarConvergencia(){const i=this.poblacion[0].fitness;for(let o=1;o<this.tamanoPoblacion;o++)if(this.poblacion[o].fitness!==i)return!1;return!0}actualizarPoblacion(i){for(const t of i){t.binario=t.cromosoma.join("");let e=0;for(let s=0;s<this.Lind;s++)e+=t.cromosoma[s]*this.arrCoeficiente[s].value;t.xi=e}let o=0,a=i.reduce((t,e)=>t+e.fitness,0);for(let t=0;t<this.tamanoPoblacion;t++)i[t].probabilidad=i[t].fitness/a,i[t].probabilidadAcumulada=o+i[t].probabilidad,o=i[t].probabilidadAcumulada;this.poblacion=[...i]}mutar(i){return"bit-flip"===this.tipoMutacion&&(i=this.mutarBitflip(i)),i}mutarBitflip(i){const o=JSON.parse(JSON.stringify(i));for(let a=0;a<this.Lind;a++)Math.random()<this.probabilidadMutacion&&(o.cromosoma[a]=0===o.cromosoma[a]?1:0);return o}seleccionarPadre(){let i=null;return i=this.seleccionarPadreRuleta(),i}seleccionarPadreRuleta(){const i=Math.random(),o={probabilidadAcumulada:0,probabilidad:0,cromosoma:[],binario:"",xi:0,fitness:0,fx:0};for(const a of this.poblacion)if(i<=a.probabilidadAcumulada){o.cromosoma=[...a.cromosoma];break}return o}cruzar(i,o){let a=[];return Math.random()>this.probabilidadCruce?[i,o]:(a=this.cruzarUnPunto(i,o),a)}cruzarUnPunto(i,o){const a=Math.floor(Math.random()*this.Lind),t={probabilidadAcumulada:0,probabilidad:0,cromosoma:[],binario:"",xi:0,fitness:0,fx:0},e={probabilidadAcumulada:0,probabilidad:0,cromosoma:[],binario:"",xi:0,fitness:0,fx:0};return t.cromosoma=t.cromosoma.concat(i.cromosoma.slice(0,a)),t.cromosoma=t.cromosoma.concat(o.cromosoma.slice(a)),e.cromosoma=e.cromosoma.concat(o.cromosoma.slice(0,a)),e.cromosoma=e.cromosoma.concat(i.cromosoma.slice(a)),[t,e]}esIndividuoValido(i){let o=0;for(let a=0;a<this.Lind;a++)o+=i.cromosoma[a]*this.arrCoeficiente[a].value;i.fitness=o;for(let a of this.arrRestriccion)switch(a.operador){case"<=":if(o>a.value)return!1;break;case">=":if(o<a.value)return!1;break;case">":if(o<=a.value)return!1;break;case"<":if(o>=a.value)return!1}return!0}calculoFitnessTotal(){let i=0;for(const o of this.poblacion)i+=o.fitness;return i}}addEventListener("message",({data:d})=>{let i=new m(d);postMessage({resultado:i})})})();